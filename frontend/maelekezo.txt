
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Make a react,nodejs,mysql project which will be like a Mapichapicha
I need a full and detailed directories,filenames.extensions &  with full code snipets, everything should be covered so that it can be run without troubles
it should have dark&light mode toggle on header''s right corner
here are the colors i need to use for each mode
->Light Mode Colors
[
Background: Soft White (#FFFFFF) or Light Gray (#F4F4F4)
These neutral tones keep the background bright and make the images pop.

Text: Dark Charcoal (#333333) or Deep Navy (#1F2A44)
For readability, dark text contrasts well with light backgrounds.

Highlighting Elements: Pastel Blues, Soft Pinks, or Mint Green (#A0D8FF, #FAD1D1, #A8E4D1)
Soft, pastel colors can be used for buttons, links, or hover effects, adding a playful, gentle touch without overwhelming the design.

Borders/Dividers: Light Gray (#D3D3D3)
Subtle borders or dividers between images maintain separation without distracting from the visuals.
]
->Dark Mode Colors
[
Background: Deep Charcoal (#121212) or Midnight Black (#000000)
A deep dark background creates a smooth contrast with images, providing a modern and sleek feel.

Text: Light Gray (#E0E0E0) or Off-White (#F5F5F5)
Soft, light text colors make the content legible without the harshness of pure white.

Highlighting Elements: Vibrant Accents like Neon Blue (#4FD1C5), Soft Coral (#FF5F5F), or Gold (#FFB84C)
For interactive elements like buttons and hover effects, vibrant accents can add energy without clashing with the dark background.

Borders/Dividers: Darker Gray (#2C2C2C)
A darker shade for dividers will create a clean, unobtrusive separation between images while maintaining a balanced, refined look.
]

It should perform CRUD operation on a mysql database
use sequelize for database
there should be 2 types of user roles [publisher,visitor]
the user doing a crud operation must be loged in and lets use jwt,
photos should be stored inside the project using multer

the uploading a new picture page should have images(and it should accept muliple images),name,category[sponsor,people:{black & white,vintage,focus,hue,dark,light},nature,animals,streets,transports:{cars,motorcycles,bicycles},buildings,electronics,home appliances],display on home(check box),event[none(selected by default),tour,birthday,wedding,walks,party],belong to user,
it should have the common header and footer
on the header it should have category filters arranged horizontally like buttons i.e excluding "sponsor" [people:{black & white,vintage,focus,hue,dark,light},nature,animals,streets,transports:{cars,motorcycles,bicycles},buildings,electronics,home appliances] 


photos where (belong to user) is not null, should only appear to publisher and the user that has that id after login in

there should be a search bar on the header''s left side
below header, on top of every page i.e [home page, photos page] should be 1 thin row that displays only images with sponsor category
it should have a home page containing those photos with (display on home) option checked
when a category is selected it should open photos page
photos page should have 4 columns of images with their names on the bottom which will be displayed on hover with black shadow background behind them,
When a picture is clicked from the photos page it should open a modal with that Photo on the left and more details of that picture on right side and a download button

There should be like button, and number of likes on every photo in photos screen and on the modal
only people who loged in should be able to like

Each page should be able to display 30 rows of images and if there is more introduce pagenation
also make sure the images load fast on the page while scrooling

You can make other important modification to optimize the project and it should not have complex code logic, also should have minimum files
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1


Given this structure
photo-gallery/
├── backend/
│   ├── config/
│   │   └── config.js
│   ├── controllers/
│   │   ├── authController.js
│   │   ├── photoController.js
│   │   └── userController.js
│   ├── middleware/
│   │   ├── authMiddleware.js
│   │   └── uploadMiddleware.js
│   ├── models/
│   │   ├── index.js
│   │   ├── Photo.js
│   │   └── User.js
│   ├── routes/
│   │   ├── authRoutes.js
│   │   ├── photoRoutes.js
│   │   └── userRoutes.js
│   ├── utils/
│   │   └── generateToken.js
│   ├── .env
│   ├── server.js
│   └── package.json
├── frontend/
│   ├── public/
│   │   └── index.html
│   ├── src/
│   │   ├── components/
│   │   │   ├── Header.jsx
│   │   │   ├── Footer.jsx
│   │   │   ├── PhotoGrid.jsx
│   │   │   ├── PhotoModal.jsx
│   │   │   └── ThemeToggle.jsx
│   │   ├── pages/
│   │   │   ├── Home.jsx
│   │   │   ├── Photos.jsx
│   │   │   └── Upload.jsx
│   │   ├── App.jsx
│   │   ├── index.js
│   │   ├── App.css
│   │   └── theme.css
│   ├── .env
│   └── package.json
├── uploads/
└── README.md


The following are missing, and i need them 



├── backend/
│   ├── controllers/
│   │   ├── photoController.js
│   │   └── userController.js
│   ├── middleware/
│   │   ├── authMiddleware.js
│   │   └── uploadMiddleware.js
│   ├── routes/
│   │   ├── photoRoutes.js
│   │   └── userRoutes.js
│   ├── utils/
│   │   └── generateToken.js
│   ├── .env


├── frontend/
│   ├── public/
│   │   └── index.html
│   ├── src/
│   │   ├── components/
│   │   │   ├── Header.jsx
│   │   │   ├── Footer.jsx
│   │   │   ├── PhotoGrid.jsx
│   │   │   ├── PhotoModal.jsx
│   │   ├── pages/
│   │   │   ├── Home.jsx
│   │   │   ├── Photos.jsx
│   │   │   └── Upload.jsx
│   │   ├── index.js
│   │   ├── App.css
│   │   └── theme.css
│   ├── .env



1. There is no login,registration pages so I need them
2. Also why the style doesn''t work in front end at all

3. Is there any modification needed on server.js,

4. I need all the queries to create all the necessary tables 

since we want to know who liked the picture 
to prevent one user to like more than once, 
won''t there be a need to create a another table to relate 
likes,photos and users, 
How can you handle this concept?

so what should the photo,user and like models be ?

````````````````````````````````````````````````````````````````
so far so good, but i''m having trouble with the flow in the frontend

Now, i want once i load the frontend at "http://localhost:3001/" 
it should fetch photos on home page containing those photos with (display on home) option checked

All i meant is it should do as i requested on the begining, let me remind you some 
of the things below...

It should perform CRUD operation on a mysql database
the user doing a crud operation must be loged in and lets use jwt,
photos should be stored inside the project using multer

the uploading a new picture page should have images(and it should accept muliple images),name,category[sponsor,people:{black & white,vintage,focus,hue,dark,light},nature,animals,streets,transports:{cars,motorcycles,bicycles},buildings,electronics,home appliances],display on home(check box),event[none(selected by default),tour,birthday,wedding,walks,party],belong to user,
it should have the common header and footer
on the header it should have category filters arranged horizontally like buttons i.e excluding "sponsor" [people:{black & white,vintage,focus,hue,dark,light},nature,animals,streets,transports:{cars,motorcycles,bicycles},buildings,electronics,home appliances] 


photos where (belong to user) is not null, should only appear to publisher and the user that has that id after login in

there should be a search bar on the header''s left side
below header, on top of every page i.e [home page, photos page] should be 1 thin row that displays only images with sponsor category
it should have a home page containing those photos with (display on home) option checked
when a category is selected it should open photos page
photos page should have 4 columns of images with their names on the bottom which will be displayed on hover with black shadow background behind them,
When a picture is clicked from the photos page it should open a modal with that Photo on the left and more details of that picture on right side and a download button

There should be like button, and number of likes on every photo in photos screen and on the modal
only people who loged in should be able to like

Each page should be able to display 30 rows of images and if there is more introduce pagenation
also make sure the images load fast on the page while scrooling

You can make other important modification to optimize the project and it should not have complex code logic, also should have minimum files

``````````````````````````````````````````````````````````````````````````````````

I want to have an upload & user account icon on the right side of header,
where once clicked it will drop login/logout options depending on whether user has loged on or not
and on the login page it should have link to register page for new user
the upload button should appear if user has loged in and is a publisher 
`````````````````
great!! 
now i have problem on uploading, firstly i provided categories so i expected to have them on 
upload page i.e [sponsor,people:{black & white,vintage,focus,hue,dark,light},nature,animals,streets,transports:{cars,motorcycles,bicycles},buildings,electronics,home appliances]
and since they can increase as time goes i think they should be fetched from the database

Also i can''t load a picture i get error "Error: ENOENT: no such file or directory, open '/home/kali/Desktop/dev/web/projects/photo-gallery/backend/uploads/1739635159414-ai-generated-7832244_1280.jpg'" 
i think there should be modifications on upload page and backend 

I need to solve these issues now
````````````````````
great now it works!, 
but i want to be able select even the parent category, if it has no child 

``````````
here is photoRoute.js
const express = require('express');
const photoController = require('../controllers/photoController');
const { authenticate, authorize } = require('../middleware/authMiddleware');
const uploadMiddleware = require('../middleware/uploadMiddleware');

const router = express.Router();

router.post('/upload', authenticate, authorize(['publisher']), uploadMiddleware, photoController.uploadPhotos);

module.exports = router;

here is uploadMiddleware.js
const multer = require('multer');
const path = require('path');

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, path.join(__dirname, '../uploads/'));
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname);
  },
});

const upload = multer({ storage }).array('images', 10); // Allow up to 10 images

module.exports = upload;


and here is photoController.js

const db = require('../models');
const multer = require('multer');
const path = require('path');

// Multer configuration for file uploads
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, path.join(__dirname, '../uploads/')); // Ensure this path is correct
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + '-' + file.originalname); // Unique filename
  },
});

const upload = multer({ storage }).array('images', 10); // Allow up to 10 images

exports.uploadPhotos = (req, res) => {
  upload(req, res, async (err) => {
    if (err) {
      return res.status(400).json({ message: 'File upload failed', error: err });
    }

    const { name, category, event, displayOnHome, userId } = req.body;
    const imageUrls = req.files.map((file) => `/uploads/${file.filename}`); // Use the correct path

    try {
      const photos = await db.Photo.bulkCreate(
        imageUrls.map((url) => ({
          name,
          category,
          event,
          displayOnHome: displayOnHome === 'true',
          userId,
          imageUrl: url,
          likes: 0,
        }))
      );
      res.status(201).json({ message: 'Photos uploaded successfully', photos });
    } catch (error) {
      res.status(500).json({ message: 'Error uploading photos', error });
    }
  });
};


Is this controller ok because i feel like there is no need for multer there if the file has been uploaded in middleware?



``````````````````````````````````

if this is my register function 
exports.register = async (req, res) => {
  const { username, password, role } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  const user = await db.User.create({ username, password: hashedPassword, role });
  res.status(201).json({ message: 'User registered', user });
}; 

how do i change it to also return { token, role: user.role, userId:user.id } 

like in my login
exports.login = async (req, res) => {
    console.log('Request Body:', req.body);    
    const { username, password } = req.body;    
  
    // Check if username and password are provided
    if (!username || !password) {
      return res.status(400).json({ message: 'Username and password are required', data:req.body });
    }
  
    try {
      const user = await db.User.findOne({ where: { username } });
  
      if (!user || !(await bcrypt.compare(password, user.password))) {
        return res.status(401).json({ message: 'Invalid credentials' });
      }
  
      const token = jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '1h' });
      res.json({ token, role: user.role, userId:user.id });
    } catch (error) {
      console.error(error);
      return res.status(500).json({ message: 'Something went wrong' });
    }
  };

  ```````````````````````````````````
  is this model right now photo.js?

module.exports = (sequelize, DataTypes) => {
    const Photo = sequelize.define('photo', {
      id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
      },
      name: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      category: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      event: {
        type: DataTypes.STRING,
        defaultValue: 'none',
      },
      displayOnHome: {
        type: DataTypes.BOOLEAN,
        defaultValue: false,
      },
      imageUrl: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      photoLikes: {
        type: DataTypes.INTEGER,
        defaultValue: 0,
      },
    },
    {
      tableName: 'photos', // Explicitly set the table name to lowercase
    });
  
    // Define associations
    Photo.associate = (models) => {
      // A photo belongs to a user
      Photo.belongsTo(models.User, { foreignKey: 'userId', onDelete: 'CASCADE' });
  
      // A photo can have many likes
      Photo.hasMany(models.Like, { foreignKey: 'photoId', onDelete: 'CASCADE' });
    };
  
    return Photo;
  };

  and user.js

module.exports = (sequelize, DataTypes) => {
    const User = sequelize.define('user', {
      id: {
        type: DataTypes.INTEGER,
        primaryKey: true,
        autoIncrement: true,
      },
      username: {
        type: DataTypes.STRING,
        allowNull: false,
        unique: true,
      },
      password: {
        type: DataTypes.STRING,
        allowNull: false,
      },
      role: {
        type: DataTypes.ENUM('publisher', 'visitor'),
        allowNull: false,
        defaultValue: 'visitor',
      },
    },
    {
      tableName: 'users', // Explicitly set the table name to lowercase
    });
  
    // Define associations
    User.associate = (models) => {
      // A user can upload many photos
      User.hasMany(models.Photo, { foreignKey: 'userId', onDelete: 'CASCADE' });
  
      // A user can like many photos
      User.hasMany(models.Like, { foreignKey: 'userId', onDelete: 'CASCADE' });
    };
  
    return User;
  };


  ````````````````````````
  this functon doesnt work
  exports.likePhoto = async (req, res) => {
  const { id } = req.params;
  try {
    const photo = await db.Photo.findByPk(id);
    if (!photo) {
      return res.status(404).json({ message: 'Photo not found' });
    }
    photo.likes += 1;
    await photo.save();
    res.json({ message: 'Photo liked', photo });
  } catch (error) {
    res.status(500).json({ message: 'Error liking photo', error });
  }
};

The aim is to update photoLikes column in photos table 
and create an entry in likes table
`````````````````````````````````````````````
that worked fine, if someone like again i think it should substract and this person should be considered as not liked the photo

`````````````````````````````````
GReat! 
Now my requirements were
the name of an image should float infront of the image on the bottom center with blackish shadow background
and likes should appear like an icon followed with numbers of likes below the name on the right corner

that was really great!!
Now we can finish with the other things i requested let meremind you some of them..
below header, on top of every page i.e [home page, photos page] should be 1 thin row that displays only images with sponsor category
it should have a home page containing those photos with (display on home) option checked
when a category is selected it should open photos page
photos page should have 4 columns of images with their names on the bottom which will be displayed on hover with black shadow background behind them,
When a picture is clicked from the photos page it should open a modal with that Photo on the left and more details of that picture on right side and a download button

There should be like button, and number of likes on every photo in photos screen and on the modal
only people who loged in should be able to like

Each page should be able to display 30 rows of images and if there is more introduce pagenation
also make sure the images load fast on the page while scrooling


so now when i click that button, it should do what i requested.. poping up a modal 

``````````````````````````````
So this is now my photomodal.jsx
import React from 'react';
import axios from 'axios';
import { FaHeart } from 'react-icons/fa';

const PhotoModal = ({ photo, onClose }) => {
  const handleLike = async () => {
    try {
      const response = await axios.post(
        `${process.env.REACT_APP_API_URL}/photos/${photo.id}/like`,
        {},
        {
          headers: { Authorization: `Bearer ${localStorage.getItem('accessToken')}` },
        }
      );
      // Update the photo''s likes count in the UI (you can use state or refetch photos)
      alert('Photo liked!');
    } catch (error) {
      console.error('Error liking photo:', error.response?.data?.message || error.message);
      alert('You have already liked this photo or need to log in.');
    }
  };

  return (
    <div className="photo-modal">
      <div className="modal-content">
        <img src={`${process.env.REACT_APP_API_URL.replace('/api', '')}${photo.imageUrl}`} alt={photo.name} />
        <div className="details">
          <h2>{photo.name}</h2>
          <p>Category: {photo.category}</p>
          <FaHeart className="fa-heart" onClick={() => handleLike(photo.id)}/> {/* Heart icon */}
          <p>Likes: {photo.photoLikes}</p>
          <button onClick={onClose}>Close</button>
          <a href={`${process.env.REACT_APP_API_URL.replace('/api', '')}${photo.imageUrl}`} download>
            Download
          </a>
        </div>
      </div>
    </div>
  );
};

export default PhotoModal;

TODO:
I want the download and close buttons to be aligned 
at the bottom starting with download followed by close button.
On top right corner of modal should be an "X" sign to close the modal
Also when clicking outside the modal it should also close
I want <FaHeart className="fa-heart" onClick={() => handleLike(photo.id)}/> {/* Heart icon */}
          <p>Likes: {photo.photoLikes}</p> to stay in one line too.
And on photogrid when hovering over an image the cursor
should change to finger
````````````````````````````````````````

Now i need filters to appear on the header like i requested below the first row of search bar and 
other buttons

Also i want the list of sponsor category photos to appear as requested

````````````````````````````````````````````
This is my header.jsx
import React, { useState, useContext } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { ThemeContext } from '../App';
import ThemeToggle from './ThemeToggle';
import CategoryFilter from './CategoryFilter';

const Header = () => {
  const { theme } = useContext(ThemeContext);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const navigate = useNavigate();
  const isLoggedIn = !!localStorage.getItem('accessToken');
  const userRole = localStorage.getItem('role');

  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('role');
    navigate('/login');
  };

  return (
    <header className={`header ${theme}`}>
      <div className="search-bar">
        <input type="text" placeholder="Search photos..." />
      </div>
      <div className="header-icons">
        {isLoggedIn && userRole === 'publisher' && (
          <Link to="/upload" className="upload-icon">
            📤 Upload
          </Link>
        )}
        <div className="user-icon" onClick={() => setIsDropdownOpen(!isDropdownOpen)}>
          👤
          {isDropdownOpen && (
            <div className="dropdown">
              {isLoggedIn ? (
                <button onClick={handleLogout}>Logout</button>
              ) : (
                <>
                  <Link to="/login">Login</Link>
                  <Link to="/register">Register</Link>
                </>
              )}
            </div>
          )}
        </div>
        <ThemeToggle />
      </div>
      <CategoryFilter />
    </header>
  );
};

export default Header;


I want search-bar,header-icons,user-icon,ThemeToggle to stay in one row
And CategoryFilter on the next row below.
These categories filter should be fetched from database, and they should
not be filled with color but rather outlined

Each category when clicked should display photos under that category in photogrid

``````````````````````````

i want to add home button with icon before search field, when clicked should 
load home i.e"http://localhost:3001/"

Also i want all icons to have uniform size(maybe one line of css that i can change for all when i want)

````````````````
I want login and register pages to have a nice interface,
and the forms should be in somekind of card, and should be at the center

the register form by default should register visitor,
and only publisher should be able to see role selection
but not others

can we make this login & register forms to display as popup not as
independent pages

and register page to ask user if they have an account? and direct
them to Login here
````````````````````````````````````

Lets deal with <ThemeToggle /> in header.jsx
I want to toggle between sun and moon icons with the words light and dark
and they should have nice sliding like transformation



            {/* {isDropdownOpen && (
              <div className="dropdown">
                {isLoggedIn ? (
                  <button onClick={handleLogout}>Logout</button>
                ) : (
                  <>
                    <Link to="/login">Login</Link>
                    <Link to="/register">Register</Link>
                  </>
                )}
              </div>
            )} */}